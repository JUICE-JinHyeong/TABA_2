tibero database  (mysql , oracle과 비슷)


tbsql sys/tibero

tibero 설치는 ppt 참고
ppt 과정 이후 오류 발생시, 자바 버전 관련 문제라면 아래 코드 입력
ln -s /usr/lib64/libncurses.so.6 /usr/lib64/libncurses.so.5
----------------

출력 테이블을 화면 꽉 차게 만들기
SET LINESIZE 숫자(EX : 1200)

출력 칼럼 테이블을 적당한 크기로 줄이기
COLUMN HIREDATE FORMAT A숫자(A15)COLUM


----------------

TBS-70004: Not connected to the server.

티베로 재접속할 것


----------------

CREATE TABLE s_region
(id	NUMBER(7),
name	VARCHAR(50)
	CONSTRAINT s_region_name_nn NOT NULL,
	CONSTRAINT s_region_id_pk PRIMARY KEY(id),
	CONSTRAINT s_region_name_uk UNIQUE(name));


CREATE TABLE s_dept(
deptno	NUMBER(2),
dname	VARCHAR2(14),
loc	VARCHAR2(13),
	CONSTRAINT s_dept_pk PRIMARY KEY(deptno));

INSERT INTO S_DEPT VALUES (10, 'ACCOUNTING', 'NEW YORK');
INSERT INTO S_DEPT VALUES (20, 'RESEARCH',   'DALLAS');
INSERT INTO S_DEPT VALUES (30, 'SALES',      'CHICAGO');
INSERT INTO S_DEPT VALUES (40, 'OPERATIONS', 'BOSTON');


CREATE TABLE s_emp
( empno NUMBER (7) CONSTRAINT s_emp_empno_nn NOT NULL,
  ename VARCHAR2 (10) CONSTRAINT s_emp_ename_nn NOT NULL,
  job VARCHAR2 (9),
  mgr NUMBER (4),
  hiredate DATE,
  sal NUMBER (7),
  comm NUMBER (7),
  deptno NUMBER (2),
  constraint s_emp_id_pk PRIMARY KEY (empno),
  constraint s_emp_mgr_fk FOREIGN KEY(mgr) REFERENCES s_emp(empno),
  constraint s_emp_deptno_fk FOREIGN KEY(deptno) REFERENCES s_dept(deptno));

INSERT INTO S_EMP VALUES (7839,'KING','PRESIDENT',NULL,'81-11-17',5000,NULL,10);
INSERT INTO S_EMP VALUES (7698,'BLAKE','MANAGER',7839,'81-05-01',2850,NULL,30);
INSERT INTO S_EMP VALUES (7782,'CLARK','MANAGER',7839,'81-05-09',2450,NULL,10);
INSERT INTO S_EMP VALUES (7566,'JONES','MANAGER',7839,'81-04-01',2975,NULL,20);
INSERT INTO S_EMP VALUES (7654,'MARTIN','SALESMAN',7698,'81-09-10',1250,1400,30);


INSERT INTO S_EMP VALUES (7499,'ALLEN','SALESMAN',7698,'81-02-11',1600,300,30);
INSERT INTO S_EMP VALUES (7844,'TURNER','SALESMAN',7698,'81-08-21',1500,0,30);
INSERT INTO S_EMP VALUES (7900,'JAMES','CLERK',7698,'81-12-11',950,NULL,30);
INSERT INTO S_EMP VALUES (7521,'WARD','SALESMAN',7698,'81-02-23',1250,500,30);
INSERT INTO S_EMP VALUES (7902,'FORD','ANALYST',7566,'81-12-11',3000,NULL,20);
INSERT INTO S_EMP VALUES (7369,'SMITH','CLERK',7902,'80-12-09',800,NULL,20);
INSERT INTO S_EMP VALUES (7788,'SCOTT','ANALYST',7566,'82-12-22',3000,NULL,20);
INSERT INTO S_EMP VALUES (7876,'ADAMS','CLERK',7788,'83-01-15',1100,NULL,20);
INSERT INTO S_EMP VALUES (7934,'MILLER','CLERK',7782,'82-01-11',1300,NULL,10);

------------

CONSTRAINT : 제약조건

data_name NUMBER(7) CONSTRAINT name NOT NULL;

data_name은 name이라는 제약조건을 건다 
어떤 조건? NOT NULL


-----------



ALTER TABLE s_region
ADD (comments VARCHAR2 (255));

ALTER TABLE s_emp
MODIFY (ename VARCHAR2 (20));

ALTER TABLE s_emp
MODIFY (SAL NOT NULL);

ALTER TABLE s_emp
DROP CONSTRAINT s_emp_mgr_fk;

ALTER TABLE s_emp
ADD CONSTRAINT s_emp_mgr_fk 
FOREIGN KEY (mgr) REFERENCES s_emp(empno);



DROP TABLE s_region;


부서 번호가 10인 직원 번호, 이름, 직무가 포함된 뷰를 생성 

CREATE VIEW empvu10
AS SELECT empno, ename, job
FROM s_emp
WHERE deptno = 10;

# view 확인법

SELECT *
FROM empvu10;

CREATE VIEW empvu20 (id, employee, title)
AS SELECT empno, ename, job
FROM s_emp
WHERE deptno = 20;

SELECT *
FROM empvu20;

CREATE VIEW salvul1500
AS SELECT empno ID , ename NAME , sal MONTHLY_SALARY
FROM s_emp
WHERE sal >= 1500;

s_emp 테이블에서 부서 번호가 30인 뷰를 WITH CHECK OPTION 이용하여 생성


CREATE VIEW empvu30
AS SELECT *
FROM s_emp
WHERE deptno = 30
WITH CHECK OPTION;

------------------------------

WITH CHECK OPTION : VIEW에서 옵션 변경을 하게 막아준다.
- INSERT/UPDATE 가능

------------------------------

부서 번호 20으로 업데이트

UPDATE empvu30
SET deptno = 20
WHERE deptno = 30;

정상)TBR-10010: Statement does not satisfy the WHERE clause of the view.

부서번호가 30인 새로운 사원 정보 입력

INSERT INTO empvu30
VALUES(9999, 'TABA', 'STUDENT', NULL, '22-10-05', 1500, NULL, 30);   

USER_VIEWS에서 현재 사용자에 속한 뷰의 정보 확인 가능

DESCRIBE user_views;

SELECT * FROM user_views;

EMPVU10 VIEW 삭제

DROP VIEW empvu10;

* Generate Primary Key Value
- 유일한 연속적 값을 생성할 수 있는 스키마 객체
- 기본 키 또는 유일 키에 값을 넣을 때 사용

구조

CREATE SEQUENCE sequence_name
    [ INCREMENT by n ]
    [ START WITH n ]
    [ {MAXVALUE n | NOMAXVALUE } ]
    [ {CYCLE | NOCYCLE } ]
    [ {CACHE n | NOCACHE } ]
    [ {ORDER | NOORDER } ]

 table_name
테이블 이름
INCREMENT BY
시퀀스 간격(default : 1)
START WITH
시퀀스 시작 값
MAXVALUE
시퀀스 최댓값
NOMAXVALUE
최댓값 지정 x
CYCLE
최댓값 도달 시 재시작
CACHE
캐시를 사용해서 미리 할당(default : 20)
ORDER
시퀀스 값 순서 유지


50부터 시작하고 10씩 증가하는 시퀀스 생성

CREATE SEQUENCE s_dept_id
MINVALUE 1
MAXVALUE 9999
INCREMENT BY 10
START WITH 50
NOCACHE
NOORDER
NOCYCLE ;

USER_SEQUENCES Columns

SEQUENCE_NAME
시퀀스 이름
MIN_VALUE
최솟값
MAX_VALUE
최댓값
INCREMENT_BY
증가 값
CYCLE_FLAG
반복 유무
ORDER_FLAG
순서 유무
CACHE_SIZE
캐시할 시퀀스 번호 수
LAST_NUMBER
디스크에 기록된 마지막 시퀀스 번호

USER_SEQUENCES 조회

DESC user_sequences;

* REFERENCE PRIMARY KEY VALUES

sequence_name.NEXTVAL
시퀀스의 다음 값을 반환
sequence_name.CURRVAL
시퀀스의 마지막 값은 반환

INSERT INTO s_dept
VALUES (s_dept_id.NEXTVAL, 'HR', 'SEOUL');  

INSERT INTO s_dept
VALUES (s_dept_id.NEXTVAL, 'FINANCE', 'MILPITAS');  

SELECT * FROM s_dept;

DROP SEQUENCE s_dept_id;


데이터베이스 테이블에 하나 이상의 인덱스를 작성하여 일부 쿼리 성능을 향상 시킬 수 있다.
자주 사용되는 WHERE 조건이나 JOIN
많은 양의 데이터 값을 가진 열 
테이블 전체 데이터 중 10-15% 데이터를 처리하는 경우 효과적
테이블이 작거나 자주 업데이트 되는 경우 인덱스는 비효율적.

by ROWID
데이터의 정확한 위치를 나타내는 행 주소를 사용한 방법
FULL-TABLE SCAN
테이블의 모든 행을 순차적으로 검색하는 방법
by INDEX
열 값의 정렬된 트리 구조를 사용한 이진 검색


ROWID로 테이블 데이터 엑세스

SELECT ename
FROM s_emp
WHERE ROWID = 'AAAArBAACAAAABFAAK';

SELECT ename
FROM s_emp;


----------------------------

인덱스는 테이블의 동작속도(조회)를 높여주는 자료구조이다. 인덱스로 데이터의 위치를 빠르게 찾아주는 역할이고

쉽게 예를 들어보면 책 뒷편에 '색인'이 인덱스의 역할과 동일하다고 볼 수 있다.

(예를들어 '홍길동'이라는 단어를 찾고싶으면 색인페이지에서 '홍'으로 시작하거나 'ㅎ'으로 시작하는 색인을 찾아보면 빠르게 찾을 수 있다.)

UNUQUE 인덱스 생성(중복 값을 허용하지 않는 인덱스)

-- 단일 인덱스
CREATE UNIQUE INDEX 인덱스 이름 ON 테이블이름(필드이름1)
-- 다중 컬럼 인덱스
CREATE UNIQUE INDEX 인덱스 이름 ON 테이블이름(필드이름1, 필드이름2, ...)
--------------------------------

* CREATE INDEXS
UNIQUE 인덱스를 만들어  칼럼에 중복될 수 없는 유일 값 보장

CREATE INDEX s_emp_ename_i
ON s_emp(ename);

DROP INDEX s_emp_ename_i;

--------------------------------

데이터베이스 관리자는 사용자에게 SQL 보안 명령을 사용해 테이블에 대한 액세스 권한을 제공
Control User Access	
데이터베이스에 대한 권한 제공
테이블 및 시퀀스와 같은 사용자 개체에 대한 액세스를 제공하고 제거
데이터 사전에서 주어진 권한 및 받은 권한 확인
데이터베이스 개체에 대한 동의어 또는 대체 이름 작성

데이터베이스 관리자는 사용자에게 시스템 권한을 부여하여 사용자는 특정 작업을 수행할 수 있다. 
시스템 권한은 명령을 실행할 수 있는 권한이다.

In One’s Own Schema
자신의 스키마에 테이블 및 시퀀스를 생성할 수 있는 권한
On all Objects of a Specified Type
모든 스키마에서 테이블 생성 및 테이블 또는 뷰를 업데이트 할 수 있는 권한
On the System or a User
사용자를 생성할 수 있는 권한


SESSION
CREATE SESSION
데이터베이스 연결 허용

TABLE
CREATE TABLE
테이블 및 인덱스 생성
CONNECT, DML, DROP, ALTER, TRUNCATE 가능

TABLE
SELECT ANY TABLE
모든 스키마에 모든 테이블, 뷰 쿼리 사용 가능

------------------------

데이터베이스 관리자는 GRANT SQL 명령을 사용하여 사용자 및 역할 권한을 부여하고 취소할 수 있다.

GRANT system_priv TO [user, role, PUBLIC] [WITH ADMIN OPTION]


 system_priv
부여되는 시스템 권한
TO
권한을 부여 받는 대상
user
일반 사용자
role
 권한 받을 역할
PUBLIC
권한 받을 공유 사용자
WITH ADMIN OPTION
사용할 수 있는 특권, 남에게 부여할 수 있는 관리 권한

# 실습을 위해 새로운 사용자 생성

CREATE USER scott
IDENTIFIED by tibero;

# GRANT SQL 명령을 사용해 scott 사용자의 스키마에 테이블을 생성할 수 있는 권한 부여
GRANT CREATE CREATE SESSION, CREATE TABLE TO scott;

# scott 사용자에게  스키마의 테이블을 변경할 수 있는 권한 부여
GRANT ALTER ANY TABLE TO scott;

# DBA_SYS_PRIVS에서 시스템 권한 확인
DESC dba_sys_privs;

# scott 사용자에게 부여된 권한 조회

SELECT grantee, privilege FROM dba_sys_privs
WHERE grantee='SCOTT';


----------------------------------

데이터베이스 관리자는 GRANT 명령을 사용하여 사용자 및 역할 권한을 부여하고 취소할 수 있다.

GRANT object_priv ON [column] OBJECT TO [user, role, PUBLIC] [WITH GRANT OPTION]

 object_priv
부여되는 객체 권한
column
특정 객체 일부 칼럼
(username.)OBJECT
스키마 객체 권한 대상이 되는 객체
TO
 객체 권한을 부여 받는 사용자
WITH GRANT OPTION
부여 받은 권한을 다른 사용자에게 부여할 수 있는 권한

--------------------------


# scott에게 s_emp 테이블을 조회 할 수 있는 권한 부여
GRANT SELECT ON s_emp TO scott;

#scott에게 S_EMP 테이블에 직원 번호, 직원 이름, 부서 번호를 삽입할 수 있는 권한과 월급을 수정할 수 있는 권한 부여
GRANT INSERT(empno, ename, deptno),
UPDATE(sal)
ON s_emp TO scott;

# scott에게 S_DEPT 테이블을 조회 할 수 있는 권한과 다른 사람에게 동일한 권한을 부여할 수 있는 권한 부여

GRANT SELECT, INSERT
ON s_dept
TO scott
WITH GRANT OPTION;

# scott이 시스템의 모든 사용자에게 sys의 S_DEPT 테이블을 조회할 수 있는 권한 부여 

SQL> conn scott
Enter Password:

GRANT SELECT
ON sys.s_dept
TO PUBLIC;

Granted.



# 현재 사용자가 scott에게 부여된 객체 조회

SELECT *
FROM user_tab_privs_made
WHERE GRANTEE = 'scott';

# 사용자 scott이 자신에 부여된 객체 조회

SELECT *
FROM user_tab_privs_recd;




-----------------------

CREATE SYNONYMS FOR CONVENIENT ACCESS

사용자가 소유한 스키마나 다른 사용자가 소유한 스키마에 속하는 동의어를 생성
Public Synonyms
데이터베이스 관리자가 작성한 동의어로, 모든 사용자가 액세스 할 수 있다.
Private Synonyms
데이터베이스 사용자에 의한 동의어로, 동의어 작성자만 액세스 할 수 있다.

구조

CREATE [PUBLIC] SYNONYM synonym_name
FOR object_name

PUBLIC
부여되는 객체 권한

object_name
동의어 개체

Tpye
테이블
뷰
시퀀스
PSM 함수, 프로시저
동의어


----------------------


# 사용자 scott이 sys의 s_dept 테이블에 대한 자신의 개인 동의어 s_dept 생성

GRANT CREATE SYNONYM TO scott;




SQL> GRANT CREATE SYNONYM TO scott;

Granted.

conn scott
Enter Password:

CREATE SYNONYM s_dept
FOR sys.s_dept; 



# DROP SYNONYM 명령어를 이용해 동의어 제거하기
DROP SYNONYM S_DEPT;

-------------------------------

REMOVE OBJECT PRIVILEGES
SQL 명령어 REVOKE를 사용해 다른 사용자에게 부여된 권한을 제거

REVOKE privilege, privilege…
ON object_name
FROM [user1_name, user2_name … | PUBLIC | role]
[CASCADE CONSTRAINTS]

 CASCADE CONSTRAINTS
REFERENCE 스키마 객체 권한을 회수하는 경우
참조 무결성 제약조건을 지운 뒤 권한 회수
(CASCADE CONSTRAINT 을 사용하지 않고, 회수하면 에러 발생)

PRIVILEGES GROUPED BY ROLE

역할 사용을 통해 권한 관리를 단순화 시킴
시스템 권한과 객체 권한으로 구성 가능
역할은 사용자가 소유하지 않고, 스키마에도 존재하지 않음.

CREATE A ROLE
CREATE ROLE role_name [NOT IDENTIFIED] [IDENTIFIED BY password]

role_name
역할 이름
NOT IDENTIFIED
패스워드 사용하지 않는다.(Default 값)
IDENTIFIED BY
역할에 패스워드 설정
password
패스워드


----------------------------------

# 역할 이름을 acct_rec으로 생성

CREATE ROLE acct_rec;
Role 'ACCT_REC' created.

# 패스워드가 bicentennial이고, 역할 이름을 acct_pay으로 생성

CREATE ROLE acct_pay
IDENTIFIED BY bicentennial;

#동의어와 테이블 생성 권한이 있는manager 역할 생성

GRANT CREATE TABLE, CREATE SYNONYM
TO manager;


#신규 사용자 kevin에게 manager 권한 부여

GRANT manager TO kevin;

Granted.


-- conn scott 를 모르겠다 tibero
-- manager 역할 부여 모름