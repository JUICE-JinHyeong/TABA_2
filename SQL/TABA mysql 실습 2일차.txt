- 데이터 조작어

SELECT  데이터 조회
INSERT  데이터 삽입
UPDATE 데이터 변경
DELETE  데이터 삭제

- 데이터 조회 관련

SELECT		검색할 열 , 식 또는 상수를 지정
FROM		데이터를 가지고 올 테이블 지정
WHERE		특정 행을 검색할 기준
GROUP BY	조회된 데이터를 정렬



- 비교 연산자

= 	같다
<> 	다르다 !=
> 	크다
>=	크거나 같다
<	작다
<=	작거나 같다

- 논리 연산자

 BETWEEN A AND B 	
 A ~ B 사이

NOT BETWEEN… AND…
Not between two values

IN (list)
Equal to any member of the following list

NOT IN (list)
Not Equal to any member of the following list

LIKE

ex) LIKE 'M%'

문자열의 형식이 아래와 같아야한다.
%는 어떤 문자가 들어와도 상관이 없다.
_는 _개수만큼의 문자가 들어와야 한다.

%문자  
문자%
%문자%

_문자
문자_
_문자_
__문자

Match a character pattern using wildcard characters

IS NULL
Is a null

IN NOT NULL
Is not a null



우선 순위는 모든 비교 연산자, AND 그리고 OR 순서다.

1	(=, <>, >, >=, <, <=, IN, LIKE, IN NULL, BETWEEN…AND)
2	AND
3	OR



ORDER THE ROWS DISPLAYED
특정 칼럼을 기준으로 정렬이 가능하다.

 column_name
칼럼 이름
table_name
테이블 이름
ASC
행을 오름차순으로 정렬(Default)
DESC
행을 내림차순으로 정렬


INSERT DATA
INSERT 문을 이용해 테이블에 새로운 행을 추가할 수 있다.
 table
테이블 이름
column
칼럼 이름
value
열에 해당하는 값


UPDATE DATA
사원번호 7636의 부서 번호와 ALEX의 부서 번호와 급여 변경

SQL> UPDATE s_emp
   2 SET deptno = 20
   3 WHERE empno = 7636;

1 row updated.

SQL> UPDATE s_emp
   2 SET deptno = 20, sal = 4000
   3 WHERE ename = 'ALEX';

1 row updated.

행 삭제

DELETE FROM table 
[WHERE condition]



CONTROL TRANSACTIONS

트랜잭션(TRANSACTION) - INSERT, UPDATE, DELETE
데이터 조작 작업은 데이터베이스 버퍼에 영향을 준다.
현재 사용자는 SELECT 문으로 데이터 조작 작업의 결과를 검토할 수 있다.
다른 사용자는 현재 사용자에 대한 데이터 조작 작업의 결과를 볼 수 없다.
영향을 받은 행은 LOCK이 걸리게 되고, 다른 사용자는 행을 변경할 수 없다.

 COMMIT
현재 트랜잭션을 종료하고 트랜잭션의 갱신된 내용을 데이터베이스에 반영
ROLLBACK
현재 트랜잭션을 종료하고 트랜잭션에서 갱신된 내용 모두를 취소




------------------------------
COMMIT(저장하기라고 생각하자)

State of the Data After COMMIT
COMMIT 문을 사용하여 보류중인 모든 변경 내용(INSERT, UPDATE, DELETE)을 영구적으로 만든다.
COMMIT 후 데이터 변경 사항이 데이터베이스 파일에 기록된다.
영향을 받은 행은 LOCK이 해제되고, 다른 사용자가 행을 변경할 수 있다.


SQL> INSERT INTO dept (deptno, dname, loc)
   2 VALUES (60, 'LAW', 'LA');

SQL> SELECT *
   2 FROM dept
   3 WHERE dname = 'LAW';

    DEPTNO DNAME          LOC
---------- -------------- -------------
        60 LAW            LA

SQL> COMMIT;

Commit completed.


-------------------------
ROLLBACK(복구)
-------------------------

State of the Data After ROLLBACK
데이터의 변경이 취소되고, 데이터의 이전 상태가 복원
영향을 받은 행은 LOCK이 해제되고, 다른 사용자가 행을 변경할 수 있다.

SQL> DELETE FROM s_emp
   2 WHERE deptno = 20;

5 rows deleted.

SQL> SELECT *
   2 FROM s_emp
   3 WHERE deptno = 20;

0 row selected.

SQL> ROLLBACK;

Rollback completed.

SQL> SELECT *
   2 FROM s_emp
   3 WHERE deptno = 20;

     EMPNO ENAME      JOB              MGR HIREDATE                                                                SAL       COMM     DEPTNO
---------- ---------- --------- ---------- ---------------------------------------------------------------- ---------- ---------- ----------
      7369 SMITH      CLERK           7902 0080/12/09                                                              800                    20
      7566 JONES      MANAGER         7839 0081/04/01                                                             2975                    20
      7788 SCOTT      ANALYST         7566 0082/12/22                                                             3000                    20
      7876 ADAMS      CLERK           7788 0083/01/15                                                             1100                    20
      7902 FORD       ANALYST         7566 0081/12/11                                                             3000                    20

-------------------------------

SAVEPOINT (변수)

특정 sql 구문을 다른 이름으로 저장한다

ROLLBACK TO SAVEPOINT (뱐수)

SAVEPOINT 이전으로 되돌린다

SAVEPOINT 문을 이용하여 현재 트랜잭션에 저장 지점을 만든다.
부분 롤백을 수행하기 위해선 저장 지점을 미리 만들어야 한다.
동일한 이름의 저장 지점을 설정하면 이전의 저장 지점은 삭제된다.

 SAVEPOINT
현재 트랜잭션 내에서 저장 지점 표시
ROLLBACK TO SAVEPOINT
저장 지점이 표시된 후 보류 중인 변경 내용 삭제



INSERT INTO s_emp(empno, ename, hiredate, sal)
VALUES (3790, 'GOODMAN', SYSDATE, 2000);

1 row inserted.

SQL> SAVEPOINT a;

Savepoint created.

INSERT INTO s_emp(empno, ename, hiredate, sal)
VALUES (3791, 'BADMAN', SYSDATE, 1000);   

1 row inserted.

SQL> SAVEPOINT b;

Savepoint created.

INSERT INTO s_emp(empno, ename, hiredate, sal)
VALUES (3792, 'YESMAN', SYSDATE, 3000);
1 row inserted.



-----------------


 CREATE TABLE과 같은 DDL 명령어 실행
자동 COMMIT
명시적 COMMIT 또는 ROLLBACK을 하지 않고 데이터베이스 정상 종료
자동 COMMIT
비정상적인 종료 또는 시스템 오류
자동 ROLLBACK


PERFORM COMPUTATIONS WITH DATA
산술 및 SQL 함수를 사용하여 다양한 방법으로 데이터를 수정하고 조회한다.
숫자 및 날짜 값을 사용하여 계산 수행
NULL 값을 포함하는 계산 처리
숫자, 날짜 및 문자 값을 수정
날짜 값을 다양한 방식으로 표시
행 그룹에 대한 계산 조회 및 수행


 +
더하기
-
빼기
*
곱하기
/
나누기

SQL> SELECT ename, sal, sal + 500 "NEW SALARY"
    FROM s_emp
    WHERE job = 'MANAGER'
    ORDER BY  sal + 500; 







----------------

ROUND(num1, num2) – num1을 소수점 아래 num2 위치에서 반올림한 값을 반환

SELECT ename, sal, ROUND(sal/22, 2)
FROM s_emp
WHERE job = 'CLERK';

TRUNC(num1, num2) – num1을 소수점 아래 num2 위치에서 버림한 값을 반환
MOD(num1, num2) – num1을 num2로 나눈 나머지를 반환하는 함수


NVL(expr1, expr2) – expr1이 NULL이 아니면 expr1을 반환하고, expr1이 NULL이면 expr2를 반환하는 함수

SQL> SELECT ename, sal, comm, NVL(sal + comm, 0)
   2 FROM s_emp
   3 WHERE deptno = 30;


SYSDATE 함수를 이용해 오늘 날짜를 출력할 수 있다.





ADD_MONTHS(date, integer) – date에 integer만큼의 달을 더한 결과를 구하는 함수
LAST_DAY(date) - 특정 일자에 해당하는 월의 마지막 일자를 표시하는 함수
NEXT_DAY(date, str) – date와 가장 가까운 다음 요일 str의 날짜를 반환하는 함수



 DD
1개월 중 몇 번째 날인지 출력( 1- 31)
YYYY
연도를 네 자리로 출력 (2022)
DY
축약 표기한 요일을 출력 (ex : THU)
HH:MI:SS
시간, 분, 초 (10:00:00)
DAY
요일을 출력 ( ex : MONDAY)
Q
분기를 출력 (1-4)
MM
달을 출력 ( 1-12)
HH24
시간을 출력 (0 – 23)
MON
축약된 달 이름을 출력 ( ex : DEC)
RM
달을 로마 숫자로 출력 (I-XII)
MONTH
달을 출력한다 (ex : NOVEMBER)
AM or PM
오전 또는 오후
YY
연도를 두 자리로 출력 (22)
TZH or THM
시간대에서 시간 or 분 출력


TO_CHAR(date_value, format_mask) – date_value를 format_mask 형식에 따라 문자열로 변환 하는 함수

SQL> SELECT ename, TO_CHAR(hiredate, 'MM/YY')
    FROM s_emp
    WHERE job =  'MANAGER'; 


INSERT INTO s_emp(empno, ename, hiredate, deptno , sal)
VALUES (8371, 'MARU', TO_DATE('19900708', 'YYYYMMDD'), 40 , 100);

1 row inserted.

접합 연산자로 문자열을 결합 시킨다.

SQL> SELECT empno || ' ' || ename "ID AND EMPLOYEE"
   2 FROM s_emp
   3 WHERE deptno = 20;


--------------------------------

첫 글자 대문자

 INITCAP
INITCAP (NAME)
Delhi Sports

UPPER
UPPER (NAME)
DELHI SPORTS

LOWER
LOWER (NAME)
delhi sports

문자를 어디서부터 어디까지 출력할지
숫자 하나만 기입할 경우 해당 문자 위치부터 출력
SUBSTR
SUBSTR (NAME, 1, 4)
Delh

LENGTH
LENGTH (NAME)
12





 AVG
평균값
MAX
최댓값
MIN
최쇳값
SUM
합
COUNT
로우의 개수를 세는 함수


GROUP BY 및 HAVING 절이 있는 행 그룹에 대해 요약 결과를 출력한다.
SELECT column_name
FROM table_name
WHERE condition
GROUP BY group_by_expression

SQL> SELECT deptno, COUNT(*) "Head Count"
   2 FROM s_emp
   3 GROUP BY deptno;

---------------

where 나 having 절에는 별칭이 안먹는다..

SQL> SELECT     ename,sal,sal+500 AS "NEW SALARY"
   2 FROM       s_emp
   3 ORDER BY   "NEW SALARY";
--------------


SELECT deptno, AVG(sal) average, COUNT(*) "Number of Employees"
FROM s_emp
GROUP BY deptno
HAVING COUNT(*) >= 3;


SELECT deptno, AVG(sal) average, COUNT(*) "Number of Employees"
FROM s_emp
GROUP BY deptno
HAVING "Number of Employees" >= 3;



SELECT	job , '$' ||''|| TO_CHAR(SUM(sal)) as "sum"
FROM	s_emp
GROUP BY	job
HAVING		SUM(sal) > 5000
ORDER BY	SUM(sal) DESC ;


-----------------------
COLUMN sum FORMAT $99,999.99
컬럼 sum을 FORMAT 이하와 같이 형태를 바꿔준다.
-----------------------


COLUMN sum FORMAT $99,999.99
SELECT	job , SUM(sal) as "sum"
FROM	s_emp
GROUP BY	job
HAVING		SUM(sal) > 5000
ORDER BY	SUM(sal) DESC ;



-----------------------

join


View를 생성해서 여러 테이블을 단일 테이블인 것처럼 참조할 수 있다.
WHERE 절에 간단한 조인 조건을 작성하여 둘 이상의 관련 테이블의 행을 조회한다. 

 table1.column = table2.column
테이블을 결합 하는 조건, 칼럼 이름 앞에 테이블 명을 표시

SQL> SELECT e_emp.last_name, e_emp.dept_id, e_dept.name
   2 FROM e_emp, e_dept
   3 WHERE e_emp.dept_id = e_dept.id;

--------------------------
테이블에 별칭을 주면 편하다.
--------------------------

SELECT     e.last_name, e.dept_id , d.name
FROM       e_emp e , e_dept d
WHERE      e.dept_id = d.id;


SELECT	d.id "DP id" , r.id "Rg id" , r.name "R name"
FROM	e_dept d , e_region r
WHERE	d.region_id = r.id;

SELECT	r.id , r.name, d.id , d.name
FROM	e_region r , e_dept d
WHERE	r.id = d.region_id AND r.name = 'North America';






