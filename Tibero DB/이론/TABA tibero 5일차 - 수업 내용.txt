tibero 단축키

(환경변수)
설정은 .bash_profile 인 듯

tbhome : /tibero/tibero7 으로 이동
grep CONTROL 파일이름 (ex : config/$TB_SID.tip)  컨트롤 하는 파일 확인

tbSQL
• 일반적인 SQL 문장 및 PSM 프로그램의 입력, 편집, 저장, 실행
• 트랜잭션의 설정 및 종료
• 스크립트를 통한 일괄 작업의 실행
• DBA에 의한 데이터베이스 관리
• 데이터베이스의 기동 및 종료
• 외부 유틸리티 및 프로그램의 실행
• tbSQL 유틸리티의 환경설정

tibero 안내서 : https://technet.tmaxsoft.com/ko/front/download/findDownloadList.do?cmProductCode=0301
(시스템 변수 확인법) : tibero7 온라인메뉴얼 -> 왼쪽 상단부 목록에서 유틸리티 안내서


tbsql 접속 방법

tbboot
tbsql sys/tibero


현재 나의 port

cat client/config/tbdsn.tbr
#-------------------------------------------------
# /tibero/tibero7/client/config/tbdsn.tbr
# Network Configuration File.
# Generated by gen_tip.sh at Thu Apr  6 18:14:04 KST 2023
tibero=(
    (INSTANCE=(HOST=localhost)
              (PORT=8629)
              (DB_NAME=tibero)
    )
)


특정 호스트, 특정 데이터베이스로 tbsql 접속 방법
tbsql sys/tibero@localhost:8629/tibero

*접속끊기
DISCONNECT
*종료 (자동 DISCONNECT)
EXIT , q , QUIT

프로세스 종료(사망)
tbdown
shutdown

프로세스 시작(생존)	실행중인 파일
nomount  	파일(x) : 파일에 대해서 전혀 open하고 있지 않음
mount		controlfile 
open(normal)	controlfile , datafile , redologfile


shutdown -> nomount -> mount -> open

----------------  tbboot ----------------------> 


종료에는 2가지 종류가 있다

* 비정상 종료 - 비상시에 사용하자!
(절차 무시 종료 : 위의 tbboot 절차를 따르지않음 )

open -> shutdown

abort
abnormal

인스턴스 시작(복구) : 일관성이 없음



* 정상 종료
(비정상 종료와 반대)

open -> mount -> nomount -> shutdown

normal
post_tx
immediate

인스턴스 시작(복구 없이 바로 시작) : 일관성이 있음


tbdown
tbdown -h
tbdown [ normal | post_tx | immediate | abort | switchover | abnormal |
NORMAL | POST_TX | IMMEDIATE | ABORT | SWITCHOVER | ABNORMAL ]

다운 모드 설명

NORMAL 
모든 세션이 끝날 때까지 기다린 후 종료하는 모드.

POST_TX 
모든 트랜잭션이 끝날 때까지 기다린 후 Tibero 를 종료하는모드.

IMMEDIATE 
현재 수행 중인 모든 작업을 강제로 중단시키며, 진행중인 트랜잭션을 롤백하고 Tibero 를 종료하는 모드.

ABORT 
Tibero 의 프로세스를 강제로 종료하는 모드

kill 명령으로 종료한 경우, tbdown clean 를 실행.

만약 Tibero 서버가 Kill 과 같은 시스템 내부 명령어에 의해서 비정상적으로 종료된 경우, 운영 중에 사용하였던 공유
메모리나 세마포어 자원들이 해제가 않 될 수 있다. 이런 경우 Tibero 가 정상적으로 재 기동 하지않게 되므로, tbdown clean 으로 기존 자원을 해제시킨 후 tbboot 를 실행




tbSQL 
기본적인 클라이언트 프로그램으로 사용자가 직접 SQL 질의를 하고 그 결과를 확인할 수 있
는 유틸리티이다.

T-Up 
다른 데이터베이스의 내용을 Tibero의 데이터베이스로 옮기는 것을 지원하는 유틸리티이다.

tbExport 
논리적 백업이나 데이터베이스 간에 데이터 이동을 위해 데이터베이스의 내용을 외부 파일로 저장하는 유틸리티이다.

tbImport 
외부 파일에 저장된 내용을 데이터베이스로 가져오는 유틸리티이다.

tbLoader 
대량의 데이터를 데이터베이스로 한꺼번에 읽어 들이는 유틸리티이다.

tbpc
C 언어로 작성된 프로그램 안에서 내장 SQL(Embedded SQL)을 사용하는 프로그램을 개발할때 이를 C 프로그램으로 변환하는 유틸리티이다. 이렇게 변환된 프로그램을 C 컴파일러를 통해 컴파일할 수 있도록 도와주는 역할도 담당한다


시스템 로그 확인 방법 (에러 메시지 출력시 원인을 찾는데 도움이 된다.)
$TB_HOME/instance/$TB_SID/log/slog/sys.log



-----------------------------

pdf - Tibero_Database_Administration.pdf

----------------------------


리스너 확인하기

ps -ef | grep tblisten


tbsql sys/tibero 실행시 한 개의 스레드가 실행된다.

세션 정보 확인하기
DESC V$SESSION;

                                                                                                                                                           컨트롤 파일에 대한 정보
 Tibero에서는 여러가지 시스템 뷰를 정의하여 컨트롤 파일의 관리
뷰 				설명
V$DATABASE 		ARCHIVELOG 모드인지 여부, 체크포인트 등의 정보
V$CONTROLFILE 		컨트롤 파일의 상태 및 파일이름 정보                                                                                                                                   
SELECT NAME, CREATE_DATE, CURRENT_TSN, RESETLOG_TSN, LOG_MODE, CKPT_TSN
FROM V$DATABASE;                                                                                                                               

SELECT STATUS, NAME FROM V$CONTROLFILE;


*REDO LOG

 리두 로그 파일의 관리 (파일의 주소가 다르므로 현재 사용중인 리드로그 주소를 찾아서 입력하자)
 로그 그룹 추가
ALTER DATABASE ADD LOGFILE GROUP 3
('/home/tibero6/tbdata/redo31.log', '/home/tibero6/tbdata/redo32.log') SIZE 512K;
 로그 그룹 삭제
ALTER DATABASE ADD LOGFILE MEMBER '/home/tibero6/tbdata/redo33.log' TO GROUP 1;
 로그 멤버 추가
ALTER DATABASE DROP LOGFILE GROUP 3 ;
 로그 멤버 삭제
ALTER DATABASE DROP LOGFILE MEMBER '/home/tibero6/tbdata/redo33.log';


시퀀스의 순서를 알 수 있다.

SELECT GROUP#, SEQUENCE# , STATUS FROM V$LOG;


    GROUP#  SEQUENCE# STATUS
---------- ---------- --------
         1          4	 	INACTIVE
         2          5 		INACTIVE
         3          6		 CURRENT



리두 로그 적용해보기

SELECT MEMBER FROM V$LOGFILE;
/tibero/tibero7/database/tibero/log001.log
/tibero/tibero7/database/tibero/log002.log
/tibero/tibero7/database/tibero/log003.log


SELECT GROUP#, SEQUENCE# , STATUS, BYTES/1024/1024 MB  FROM V$LOG;


    GROUP#  SEQUENCE# STATUS           MB
---------- ---------- -------- ----------
         1          4 		INACTIVE         50
         2          5		 INACTIVE         50
         3          6 		CURRENT          50


ALTER DATABASE ADD LOGFILE GROUP 3
('/tibero/tibero7/database/tibero/log001.log'
,'/tibero/tibero7/database/tibero/log001.log') SIZE 50M;


<아카이브로그 모드로 변경하기>


1. 현재 로그 모드 조회
	1. SELECT LOG_MODE FROM V$DATABASE;
2. 로그 모드 변경
	1. 티메로 인스턴스가 마운트모드가 되도록 하기
		1. tbboot immediate
		2. tbboot mount
	2. ALTER DATABASE ARCHIVELOG;
	3. 티베로 인스턴스를 노말 모드로 변경
		1. tbdown immediate
		2. tbboot (자동 노말 모드)
3. 현재 로그 모드 조회
	1. SELECT LOG_MODE FROM V$DATABASE;
4. 아카이브로그 모드 조회
	1. 
5. 아카이브로그 생성
	1. ALTER SYSTEM SWITCH LOGFILE;
6. 아카이브로그 조회 (출처가 CONTROL 파일 - 아카이브 파일이 만들어질 때 CONTROL 파일에 기록을 남김)
	1. SELECT * FROM V$ARCHIVED_LOG;
7. 아카이브로그 조회(아카이브 파일 직접 조회)
	1. SELECT * FROM V$ARCHIVE_DEST_FILES;

 


테이블스페이스(Tablespace)

 개요

- 하나 이상의 논리적 저장 영역으로 구성되어 있으며 Tibero의 모든 데이터를 저장
- 각 테이블스페이스는 물리적인 저장 영역인 데이터파일이라는 하나 이상의 파일로 구성되며, 이 데이터 파일은 운영체제의 물리적인 저장영역

 TABLESPACE 관리 지침
– Using Multiple Tablespaces

• Data Dictionary Data 와 유저 Data의 분리
• 어플리케이션별 분리
• I/O 경합을 줄이기 위하여 데이터 파일의 분산(디스크)
• 유저 Data 와 Rollback Segment의 분리
• 개별 테이블스페이스를 오프라인 할 수 있도록 할 것.
• 업데이트가 많은것, 읽기 전용, 임시용 등 특별한 형태별 지정
• 개별 테이블스페이스의 백업 고려



 테이블스페이스 생성
▪ System Tablespace는 데이터베이스가 생성될 때 생성
▪ Non System Tablespace 생성하기 (일반 유저가 사용하는 Tablespace)


CREATE TABLESPACE my_space
DATAFILE '/tibero/tbdata/my_file001.dtf' SIZE 50M
AUTOEXTEND ON NEXT 10M MAXSIZE 3G
EXTENT MANAGEMENT LOCAL
UNIFORM SIZE 256K; 

TABLESPACE의 칼럼 확인하기

SELECT NAME FROM V$TABLESPACE;

>> MY_SPACE가 추가된 것을 확인할  수 있다.


DESC DBA_DATA_FILES ;
데이터 테이블 확인하기
SELECT FILE_NAME , BYTES/1024/1024 FROM DBA_DATA_FILES;
데이터 파일 이름과 크기 확인하기

* 데이터파일의 크기 변경
ALTER DATABASE DATAFILE '/tibero/tbdata/my_file001.dtf' RESIZE 100M; 

*데이터파일 추가
ALTER TABLESPACE my_space ADD DATAFILE 'my_file002.dtf' SIZE 20M; 


<데이ㅓ베이스 변경 작업시 원칙>

1. 변경 명령
	1. ALTER SYSTEM ~
	2. ALTER DATABASE ~
	3. 티베로 SQL 참조 안내서의 DDL 부분 참고
2. 현재 값을 조회하는 명령
	1. SELECT * FROM V$~
	2. SELECT * FROM DBA ~
	3. 티베로 참조 안내서 의 데이터딕셔너리 부분 참고



제공된 테이블 확인하기
DESC DBA_FREE_SPACE ;

COL FILE_NAME FOR A40
SELECT FILE_ID,FILE_NAME   FROM DBA_DATA_FILES;



-------------
사용자 관리
-----------
사용자 관리
− Tibero가 설치되면 아래와 같은 사용자 계정이 자동으로 생성됨
− 데이터베이스 관리자는 기본 계정 이외에 업무에 필요한 사용자 계정을 추가 생성하고, 관리하여야 함

계정 

SYS 
데이터베이스 관리를 위한 계정으로서 시스템 패키지, 동의어, 사용자, 역할, 가상 테이블, 시퀀스, 동적 뷰 등을 생성하고 관리한다.

SYSCAT 
데이터베이스 관리를 위한 정적 카탈로그 뷰를 생성하고 관리하는 계정이다.

OUTLN 
동일한 SQL을 수행할 때 항상 같은 질의 플랜(plan)으로 수행될 수 있게 관련 힌트(hint)를 저장하는 등의 일을 하는 계정이다.

SYSGIS 
GIS(Geographic Information System)와 관련된 테이블 생성 및 관리를 하는 계정이다.

TIBERO 
CONNECT, RESOURCE, DBA 역할이 부여된 샘플 사용자 계정이다.

TIBERO1 
CONNECT, RESOURCE, DBA 역할이 부여된 샘플 사용자 계정이다.

사용자 계정
− Tibero 내부의 데이터에 접근하기 위해서는 사용자 계정(Account)이 필요하다.
− 각 계정은 패스워드(Password)를 통해 보안이 유지된다
▪ 패스워드는 사용자 계정을 생성할 때 설정됨
▪ 사용자 계정이 생성된 이후에 변경할 수 있음
▪ 패스워드는 데이터 사전(Data Dictionary)에 암호화된 형태로 저장됨
− 하나의 사용자 계정은 하나의 스키마를 가지며 스키마의 이름은 사용자의 이름과 같다.
( ** 스키마(Schema) : 테이블, 뷰, 인덱스 등의 스키마 객체(Schema object)의 묶음 )

사용자 생성
− 사용자를 새로 생성하거나 변경 혹은 삭제하기 위해서는 DBA권한을 가진 사용자로 접속해야 함.
− Tibero에서는 기본적으로 SYS라는 DBA 사용자를 제공
− 사용자 생성은 아래와 같이 CREATE USER 명령을 사용하여 할 수 있다

CREATE USER tibero
IDENTIFIED BY tmax
DEFAULT TABLESPACE MY_SPACE;

▪ 사용자를 생성 후 DB에 접속할 수 있는 CONNECT 권한을 부여하지 않으면 DB에 접속할 수 없다.
▪ 만약 Default tablespace 를 지정하지 않으면 database 의 default tablespace 로 object 가 저장이 되고, Database의 default tablespace 가 지정되지 않았다면 USR tablespace 로 저장이 됩니다

예) 현재 유저의 Default tablespace 확인.
 select default_tablespace from user_users;
예) ‘tiberouser01’ 유저의 default tablespace 를 ts_tiberouser 로 변경.
 alter user tiberouser01 default tablespace ts_tiberouser;
예) emp 테이블의 tablespace 를 ts_tiberouser 로 변경.
 alter table emp move tablespace ts_tiberouser;

 사용자 정보 변경
− 비밀번호 변경
	ALTER USER tibero
	IDENTIFIED BY tmax123;
− 사용자 기본 테이블스페이스 변경
	ALTER USER tibero
	DEFAULT TABLESPACE TMAX_DAT
 사용자 삭제
	SQL>DROP USER park CASCADE; 

사용자 정보 조회
− 사용자에 대한 일반적인 관리에 도움을 주기 위해 아래와 같은 시스템 뷰 제공. 뷰 설명
ALL_USERS •데이터베이스 내의 모든 사용자에 대한 기본적인 정보
DBA_USERS •데이터베이스 내의 모든 사용자에 대한 자세한 정보
USER_USERS •현재 사용자에 대한 정보

 프로파일
− 데이터베이스 사용자의 패스워드 관리 정책을 지정할 수 있다.
− 이 처럼, 프로파일은 사용자 패스워드 관리 정책을 다양하게 생성하고 각각의 사용자에게 특정 정책을 사용하도록 지정함으로써 사용자별로 그룹화된 패스워드 정책을 관리할 수 있는 기능을 제공한다.


CREATE PROFILE prof LIMIT
failed_login_attempts 3
password_lock_time 1/1440 password_life_time 90
password_reuse_time unlimited
password_reuse_max 10
password_grace_time 10
password_verify_function verify_function; 

구성요소 설명
FAILED_LOGIN_ATTEMPTS 
잘못된 패스워드로 로그인 시도할 경우 사용자 계정를 잠글때까지 로그인 시도 허용 횟수를 지정한다.

LOGIN_PERIOD 
마지막 로그인 후 지정된 시간이 지나면 계정이 잠긴다.

PASSWORD_LIFE_TIME

패스워드 만료 기간을 설정한다. 숫자와 수식 두가지 형태로 지정할 수 있다. 숫자로 지정할 경우 단위는 일(day)이다. 예를 들어 30으로 지정하면 패스워드 만료일자가 30일 후가 된다.
해당 값을 1일 미만으로 지정하는 등 특별한 용도로 사용 하기 위해 수식을 사용할 수 있다. 예를 들어 1/1440으로 지정하면 패스워드 만료 일자가 1분 후가 된다.

PASSWORD_REUSE_TIME 
패스워드 재사용 금지 기간을 설정함. 숫자와 수식 두가지 형태로 지정할 수 있다.

예) 해당 값을 30으로 설정하면 30일동안 동일한 패스워드로 다시 변경할 수 없다.

PASSWORD_REUSE_MAX
설정된 갯수만큼 최근 변경한 패스워드는 재사용할 수 없다.

예) 10으로 지정하면 현재 패스워드를 재사용하기 위해서는 10회 이상 다른 값으로 먼저 패스워드를 변경해야 한다.


PASSWORD_LOCK_TIME
패스워드 오류 횟수 초과로 계정이 잠금 상태가 되었을 때 자동으로 잠금 상태를 해제하는 기간을 설정한다. 숫자와 수식 두가지 형태로 지정할 수 있다.

예) 1/1440으로 지정하면 1분후 자동으로 잠금 상태가 해제된다.

PASSWORD_GRACE_TIME
패스워드 사용기간(PASSWORD_LIFE_TIME) 만료 후 패스워드 만료 경고를 보내는 기간을 설정한다. 숫자와 수식 두가지 형태로 지정할 수 있다.
경고를 보내는 기간은 패스워드 사용기간 만료후 첫 접속한 시점부터 계산한다. 

예) PASSWORD_LIFE_TIME을 30, PASSWORD_GRACE_TIME을 3으로 설정하면 30일이 지난 후 첫 접속부터 3일간 패스워드 만료 경고가 나타나고 다시 3일이 지나면 계정이 잠금상태가 된다.
패스워드 만료 경고는 tbsql에서만 동작하며 다른 방식으로 접속하는 경우(OCI, JDBC등) 패스워드 만료 에러를 반환한다.

PASSWORD_VERIFY_FUNCTION

패스워드를 변경할 때 패스워드 문자열을 검사하 여 유효성을 확인하는 PSM 함수를 지정한다. PSM 함수는 기본으로 들어있는 함수를 지정하거나 다른 함수를 정의해서 지정할 수 있다.
아무것도 지정하지 않으면 데이터베이스를 생성할 때 미리 만들어진 NULL_VERIFY_FUNCTION이라는 함수를 기본으로 사용한다



프로파일 적용

− 프로파일을 변경 : PROF1이라는 profile의 패스워드 오류 횟수 초과시 계정 잠금 상태가 1일간 지속되며 한 번 사용한 패스워드는 30개의다른 패스워드를 사용한 이후에 다시 사용할 수 있다.

ALTER PROFILE prof LIMIT
password_lock_time 1
password_reuse_time 30;

−프로파일 삭제
삭제하려는 프로파일을 이미 사용자가 지정한 경우 반드시 cascade 옵션을 붙여야 한다. casade 옵션을 사용하면 해당 프로파일을 지정한 모든 사용자의 프로파일 지정 정보를 일괄 삭제한다. 단, 사용자 정보는 삭제하지 않는다.

DROP PROFILE prof CASCADE;

−프로파일 지정

CREATE USER Peter IDENTIFIED BY abcd PROFILE prof;

− 프로파일 변경

ALTER USER Peter PROFILE default


권한(Privilege)

− 데이터베이스나 데이터베이스 오브젝트에 접근하여 SQL문을 실행하기 위한 권리
− 권한 종류
▪ 스키마 오브젝트 권한
▪ SYSTEM 권한
− 특권을 부여하는 예

conn Peter/abcdef ... ① ... Connected.

CREATE TABLE EMPLOYEE
(ID NUMBER,
EMPLOYEE_NAME VARCHAR(20),
ADDRESS VARCHAR(50)); ... ② ... Created.
SQL> GRANT SELECT ON EMPLOYEE TO Smith; ... ③ ... Granted.



① Peter 라는 사용자 계정으로 데이터베이스에 접속한다.
② CREATE TABLE 문을 사용하여 EMPLOYEE 테이블을 생성한다. 
    총 3개의 컬럼(ID , EMPLOYEE_NAME, ADDRESS)을 생성한다.
③ Smith 라는 사용자가 Peter 사용자가 생성한 EMPLOYEE 테이블에 GRANT 명령을 실행하여 SELECT 특권을 부여한다.

이제 사용자 Smith는 Peter의 EMPLOYEE 테이블을 조회할 수 있다



 시스템 권한 (System Privilege)
− 데이터베이스를 관리하는 데 필요한 시스템 명령어 사용을 위한 권한
− 시스템 권한은 기본적으로 SYS 사용자가 소유하고 있으며, 다른 사용자에게 부여 가능
− WITH ADMIN OPTION을 이용 권한 부여
▪ 권한을 부여 받은 사용자가 부여 받은 시스템 권한을 다른 사용자에게 다시 부여 가능

GRANT SELECT ANY TABLE TO tibero
WITH ADMIN OPTION; 


ALTER SYSTEM •ALTER SYSTEM 명령을 사용 수 있다.
CREATE SESSION • DB에 session을 생성. 즉 로그인을 할 수 있다.
CREATE TABLESPACE • TABLESPACE를 생성
ALTER TABLESPACE • TABLESPACE를 변경
DROP TABLESPACE • TABLESPACE를 삭제
CREATE USER • USER를 생성
ALTER USER • USER 정보를 변경
DROP USER • USER를 삭제

CREATE TABLE •자신의 스키마에 TABLE을 생성
CREATE ANY TABLE •임의의 스키마에 TABLE을 생성
ALTER ANY TABLE •임의의 스키마에 있는 TABLE을 변경
DROP ANY TABLE •임의의 스키마에 있는 TABLE을 삭제
COMMENT ANY TABLE •임의의 스키마에 있는 TABLE에 주석 추가
SELECT ANY TABLE •임의의 스키마에 있는 TABLE에 질의
INSERT ANY TABLE •임의의 스키마에 있는 TABLE에 row를 삽입
UPDATE ANY TABLE •임의의 스키마에 있는 TABLE의 row를 갱신
DELETE ANY TABLE •임의의 스키마에 있는 TABLE의 row를 삭제
CREATE ANY INDEX •임의의 스키마에 있는 TABLE에 대한 인덱스를 생성
ALTER ANY INDEX •임의의 스키마에 있는 TABLE에 있는 인덱스를 수정
DROP ANY INDEX •임의의 스키마에 있는 TABLE에 있는 인덱스를 삭제
CREATE SYNONYM •자신의 스키마에 동의어를 생성
CREATE ANY SYNONYM •임의의 스키마에 동의어를 생성
DROP ANY SYNONYM •임의의 스키마에 있는 동의어를 삭제

CREATE TABLE •자신의 스키마에 TABLE을 생성
CREATE ANY TABLE •임의의 스키마에 TABLE을 생성
ALTER ANY TABLE •임의의 스키마에 있는 TABLE을 변경
DROP ANY TABLE •임의의 스키마에 있는 TABLE을 삭제
COMMENT ANY TABLE •임의의 스키마에 있는 TABLE에 주석 추가
SELECT ANY TABLE •임의의 스키마에 있는 TABLE에 질의
INSERT ANY TABLE •임의의 스키마에 있는 TABLE에 row를 삽입
UPDATE ANY TABLE •임의의 스키마에 있는 TABLE의 row를 갱신
DELETE ANY TABLE •임의의 스키마에 있는 TABLE의 row를 삭제
CREATE ANY INDEX •임의의 스키마에 있는 TABLE에 대한 인덱스를 생성
ALTER ANY INDEX •임의의 스키마에 있는 TABLE에 있는 인덱스를 수정
DROP ANY INDEX •임의의 스키마에 있는 TABLE에 있는 인덱스를 삭제
CREATE SYNONYM •자신의 스키마에 동의어를 생성
CREATE ANY SYNONYM •임의의 스키마에 동의어를 생성
DROP ANY SYNONYM •임의의 스키마에 있는 동의어를 삭제

SYSDBA • SHUTDOWN, ALTER DATABASE, CREATE DATABASE,
ARCHIVELOG, RECOVERY 명령을 내릴 수 있다
CREATE PUBLIC SYNONYM • PUBLIC 스키마에 동의어를 생성
DROP PUBLIC SYNONYM • PUBLIC 스키마에 동의어를 삭제
CREATE VIEW •자신의 스키마에 VIEW를 생성
CREATE ANY VIEW •임의의 스키마에 VIEW를 생성
DROP ANY VIEW •임의의 스키마에 있는 VIEW를 삭제
CREATE SEQUENCE •자신의 스키마에 SEQUENCE를 생성
CREATE ANY SEQUENCE •임의의 스키마에 SEQUENCE를 생성
ALTER ANY SEQUENCE •임의의 스키마에 있는 SEQUENCE를 변경
DROP ANY SEQUENCE •임의의 스키마에 있는 SEQUENCE를 삭제
SELECT ANY SEQUENCE •임의의 스키마에 있는 SEQUENCE를 질의
CREATE ROLE •롤을 생성
DROP ANY ROLE •롤을 삭제
GRANT ANY ROLE •임의의 롤을 부여

ALTER ANY ROLE •롤을 수정
ALTER DATABASE • DATABASE를 변경
CREATE PROCEDURE •자신의 스키마에 psm procedure를 생성
CREATE ANY PROCEDURE •임의의 스키마에 psm procedure를 생성
ALTER ANY PROCEDURE •임의의 스키마에 있는 psm procedure를 변경
DROP ANY PROCEDURE •임의의 스키마에 있는 psm procedure를 삭제
EXECUTE ANY PROCEDURE •임의의 스키마에 있는 psm procedure를 실행
CREATE TRIGGER •자신의 스키마에 있는 trigger를 생성
CREATE ANY TRIGGER •임의의 스키마에 있는 trigger를 생성
ALTER ANY TRIGGER •임의의 스키마에 있는 trigger를 변경
DROP ANY TRIGGER •임의의 스키마에 있는 trigger를 삭제
GRANT ANY OBJECT PRIVILEGE •모든 스키마 객체에 대한 특권을 가진다.
GRANT ANY PRIVILEGE •모든 특권을 다 부여할 수 있다. 


권한 회수(REVOKE)
− 스키마 오브젝트 권한 회수
 REVOKE SELECT, UPDATE (EMPLOYEE_NAME, ADDRESS) ON EMPLOYEE
FROM tibero;

− 시스템 권한 회수
REVOKE SELECT ANY TABLE FROM tibero; 



----------
롤(ROLE)

-----------



롤 (Role)
− 여러 권한을 모아놓은 집합이며, 하나의 단위로서 사용자에게 부여
− 롤을 생성하거나 수정, 부여하기 위해서는 그에 맞는 권한이 필요

SQL> CREATE ROLE APP_USER;
SQL> GRANT CREATE SESSION TO APP_USER;
SQL> CREATE ROLE APP_USER2;
SQL> GRANT SELECT, INSERT ON tibero.prduct TO APP_USER2;

- 롤 부여

SQL> GRANT APP_USER TO tibero;
SQL> GRANT APP_USER2 TO tibero; 

− WITH ADMIN OPTION
▪ 롤을 부여 받은 사용자가 부여 받은 롤을 다른 사용자에게 다시 부여 가능
SQL> GRANT APP_USER TO tibero WITH ADMIN OPTION; 


-롤 취소
SQL> REVOKE APP_USER FROM tibero; 



롤 		설명
CONNECT 	•CREATE SESSION

RESOURCE
•CREATE PROCEDURE
•CREATE SEQUENCE
•CREATE TABLE
•CREATE TRIGGER

DBA •모든 시스템 권한이 WITH ADMIN OPTION으로 부여됨

 SET ROLE 명령
− 동적으로 변경 가능 롤 변경 가능

SET ROLE APP_USER, TMAX; /* APP_USER, TMAX 롤을 켬 */
SET ROLE ALL EXCEPT TMAX; /* TMAX 를 제외한 모든 롤을 켬 */
SET ROLE ALL; /* 모든 롤을 켬 */
SET ROLE NONE; /* 모든 롤을 끔 */ 




권한과 롤(ROLE) 정보 조회
뷰 설명
DBA_ROLES •모든 롤에 대한 정보
DBA_ROLE_PRIVS •사용자나 다른 롤에 부여된 모든 롤의 정보
USER_ROLE_PRIVS •현재 사용자나 PUBLIC 사용자에 부여된 롤의 정보
DBA_SYS_PRIVS •사용자에게 부여된 모든 권한의 정보
USER_SYS_PRIVS •현재 사용자에게 부여된 권한의 정보
DBA_TBL_PRIVS •데이터베이스 내의 모든 스키마 오브젝트 권한의 정보
USER_TBL_PRIVS •현재 사용자가 가지고 있는 모든 스키마 오브젝트 권한의 정보
ALL_TBL_PRIVS •현재 사용자가 가지고 있는 모든 스키마 오브젝트 권한과 모든 사용자가
사용할 수 있게 공개된 모든 스키마 오브젝트 권한의 정보
DBA_COL_PRIVS •데이터베이스 내의 모든 스키마 오브젝트 권한중 스키마 오브젝트의 특정
컬럼에 부여된 권한의 정보
USER_COL_PRIVS •현재 사용자가 가지고 있는 스키마 오브젝트 권한중 스키마 오브젝트의
특정 컬럼에 부여된 권한의 정보
ALL_COL_PRIVS •현재 사용자가 가지고 있는 스키마 오브젝트 권한 혹은 모든 사용자가
사용할 수 있게 공개된 모든 스키마 오브젝트 권한중 스키마 오브젝트의
특정 컬럼에 부여된 권한의 정보.
USER_COL_PRIVS_MADE
ALL_COL_PRIVS_MADE
•현재 사용자 소유의 오브젝트중 특정 컬럼에 부여된 권한의 정보
•현재 사용자가 만든 권한중 스키마 오브젝트의 특정 컬럼에 부여된
권한의 정보
USER_COL_PRIVS_RECD
ALL_COL_PRIVS_RECD
•현재 사용자에게 부여된 모든 스키마 오브젝트 권한중 스키마
오브젝트의 특정 컬럼에 부여된 권한의 정보
•현재 사용자또는 PUBLIC 사용자에게 부여된 모든 스키마 오브젝트
권한중 스키마 오브젝트의 특정 컬럼에 부여된 권한의 정보


----
스키마
-----


스키마는 집합체로써 각종 오브젝트를 포함하며, 동일한 이름의 유저에 의해 소유된다. 본 문서에서는 다음과 같은 오브젝트에 대해 학습하고자 한다.
• TABLE
• SYNONYM
• INDEX
• VIEW
• SEQUENCE
• JOB
스키마 오브젝트는 논리적인 데이터 저장 구조로써 디스크의 물리적 파일과 1대1 대응을 하지않고, 논리적 구조인 테이블스페이스에 저장된다.


SQL 문장에서 스키마 객체의 이름을 명시할 때는 '따옴표 있는 식별자' 또는 '따옴표 없는 식별자'를 사용한다.
따옴표 없는 식별자는 대소문자를 구별하지 않으며, 모두 대문자로 간주되어 처리된다. 따옴표 있는 식별자는 대소문자를 구분한다.

예를 들어 다음의 경우는 모두 서로 다른 식별자이다.

서로 다른 식별자 
department
"department"
"Department"


서로 같은 식별자
department
DEPARTMENT
"DEPARTMENT"

예약어
예약어는 따옴표 없는 식별자가 될 수 없다. 따옴표를 적용하여 예약어를 식별자로 만들 수 있으나, 권장하지는 않는다. 예약어는 SQL참조 안내서의 “Appendix A. 예약어”를 참고한다.

create table table(c1 number);
TBR-7207: New identifier required: 'TABLE' is a reserved word.
at line 1, column 14 of null:

create table table(c1 number)

CREATE TABLE "TABLE"(C1 NUMBER);
Table 'TABLE' created.

숫자,한글,기호
따옴표 없는 식별자는 알파벳, 한글, 숫자, 밑줄( _ ), $, #만 사용할 수 있다. 다만, 숫자, '$', '#'는 첫 글자로 올 수 없다.


• 하나의 테이블 내의 서로 다른 컬럼은 동일한 이름을 가질 수 없다.
• 서로 다른 테이블에 속해 있는 컬럼은 동일한 이름을 가질 수 있다.
• 한 패키지 내의 서로 다른 프러시저나 함수는 인자의 개수나 데이터 타입이 다른 경우에 한해서 동일한 이름을 가질 수 있다.
• 하나의 네임스페이스 안에서 서로 다른 두 객체가 동일한 이름을 가질 수 없다.

스키마 객체

 1. 하나의 네임스페이스
	테이블, 뷰, 실체화 뷰, 시퀀스, 동의어, 패키지, 패키지에 포함되지 않은 함수 및 프러시저
 2. 독립적인 네임스페이스
	인덱스 , 트리거, 서로 다른 스키마의 네임스페이스는 공유되지 않는다. 그러므로 서로 다른 스키마에 있는 	두 개의 테이블은 같은 이름을 가질 수 있다.

일반 객체

1. 독립적인네임스페이스
	사용자 역할, 공유 동의어, 테이블 스페이스

* 모든 스키마 객체를 볼 수 있는 뷰
DESC DBA_OBJECTS;

SELECT OBJECT_TYPE, COUNT(*)
FROM DBA_OBJECTS
GROUP BY   OBJECT_TYPE

SELECT OWNER, OBJECT_TYPE, COUNT(*)
FROM DBA_OBJECTS
GROUP BY   OWNER , OBJECT_TYPE